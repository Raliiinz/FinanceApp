package com.example.financeapp.data.repository

import com.example.financeapp.data.mapper.mapToCategory
import com.example.financeapp.data.mapper.mapToCheck
import com.example.financeapp.data.mapper.mapToExpenses
import com.example.financeapp.data.mapper.mapToIncome
import com.example.financeapp.data.model.AccountBrief
import com.example.financeapp.data.model.AccountResponse
import com.example.financeapp.data.model.CategoryResponse
import com.example.financeapp.data.model.StatItem
import com.example.financeapp.data.model.TransactionResponse
import com.example.financeapp.domain.model.Category
import com.example.financeapp.domain.model.Check
import com.example.financeapp.domain.model.Expense
import com.example.financeapp.domain.model.Income
import com.example.financeapp.domain.repository.FinanceRepository
import javax.inject.Inject

class FinanceRepositoryImpl @Inject constructor() : FinanceRepository {
    override suspend fun getExpenses(): List<Expense>? {
        val expensesData = listOf(
            Triple("–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "100 000 P", null),
            Triple("–û–¥–µ–∂–¥–∞", "100 000 P", null),
            Triple("–ù–∞ —Å–æ–±–∞—á–∫—É", "100 000 P", "–î–∂–µ–∫"),
            Triple("–ù–∞ —Å–æ–±–∞—á–∫—É", "100 000 P", "–≠–Ω–Ω–∏"),
            Triple("–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã", "100 000 P", null),
            Triple("–ü—Ä–æ–¥—É–∫—Ç—ã", "100 000 P", null),
            Triple("–°–ø–æ—Ä—Ç–∑–∞–ª", "100 000 P", null),
            Triple("–ú–µ–¥–∏—Ü–∏–Ω–∞", "100 000 P", null)
        )

        val initialExpensesList = expensesData.mapIndexed { index, (name, amount, comment) ->
            TransactionResponse(
                id = index + 1, // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                account = AccountBrief(
                    id = index + 1,
                    name = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
                    balance = "-${amount.replace(" P", "").replace(" ", "")}",
                    currency = "RUB"
                ),
                category = CategoryResponse(
                    id = index + 1,
                    name = name,
                    emoji = when {
                        name == "–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã" -> "üè†"
                        name == "–û–¥–µ–∂–¥–∞" -> "üëó"
                        name.contains("—Å–æ–±–∞—á–∫—É") -> "üê∂"
                        name == "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã" -> "–†–ö"
                        name == "–ü—Ä–æ–¥—É–∫—Ç—ã" -> "üç≠"
                        name == "–°–ø–æ—Ä—Ç–∑–∞–ª" -> "üèãÔ∏è"
                        name == "–ú–µ–¥–∏—Ü–∏–Ω–∞" -> "üíä"
                        else -> "üí∞"
                    },
                    isIncome = false
                ),
                amount = amount.replace(" P", "").replace(" ", ""),
                transactionDate = "2025-06-10T21:56:58.596Z",
                comment = comment,
                createdAt = "2025-06-10T21:56:58.596Z",
                updatedAt = "2025-06-10T21:56:58.596Z"
            )
        }
        return initialExpensesList.map { it.mapToExpenses() }
    }

    override suspend fun getIncomes(): List<Income>? {
        val initialIncomesList = mutableListOf<TransactionResponse>()
            .apply {
                add(
                    TransactionResponse(
                        id = 1,
                        account = AccountBrief(
                            id = 1,
                            name = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
                            balance = "-670000.00",
                            currency = "RUB"
                        ),
                        category = CategoryResponse(
                            id = 1,
                            name = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                            emoji = "üí∞",
                            isIncome = true
                        ),
                        amount = "500000.00",
                        transactionDate = "2025-06-10T21:56:58.596Z",
                        comment = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü",
                        createdAt = "2025-12-10T21:50:58.596Z",
                        updatedAt = "2025-12-10T21:50:58.596Z"
                    )
                )
                add(
                    TransactionResponse(
                        id = 2,
                        account = AccountBrief(
                            id = 2,
                            name = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
                            balance = "-670000.00",
                            currency = "RUB"
                        ),
                        category = CategoryResponse(
                            id = 2,
                            name = "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
                            emoji = "üí∞",
                            isIncome = true
                        ),
                        amount = "100000.00",
                        transactionDate = "2025-06-10T21:56:58.596Z",
                        comment = "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –º–µ—Å—è—Ü",
                        createdAt = "2025-12-10T21:50:58.596Z",
                        updatedAt = "2025-12-10T21:50:58.596Z"
                    )
                )

            }
        return initialIncomesList.map { it.mapToIncome() }
    }

    override suspend fun getChecks(): List<Check>? {
        val initialAccountList = mutableListOf<AccountResponse>()
            .apply {
                add(
                    AccountResponse(
                        id = 1,
                        name = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
                        balance = "-670000.00",
                        currency = "‚ÇΩ",
                        incomeStats = StatItem(
                            categoryId = 1,
                            categoryName = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                            emoji = "üí∞",
                            amount = "5000.00"
                        ),
                        expenseStats = StatItem(
                            categoryId = 1,
                            categoryName = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                            emoji = "üí∞",
                            amount = "5000.00"
                        ),
                        createdAt = "2025-06-12T23:10:08.275Z",
                        updatedAt = "2025-06-12T23:10:08.275Z"
                    )
                )
            }
        return initialAccountList.map { it.mapToCheck() }
    }

    override suspend fun getCategories(): List<Category> {
        val initialCategoryList = mutableListOf<CategoryResponse>()
            .apply {
                repeat(7) {
                    add(
                        CategoryResponse(
                            id = 1,
                            name = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                            emoji = "üí∞",
                            isIncome = true
                        )
                    )
                }

            }
        return initialCategoryList.map { it.mapToCategory() }
    }
}